// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.4;
 import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract tokentransfer{
    address owner;
    uint256 balance;
event sent(address from, address to,uint amount);
event transferrecieved(address from ,uint amount);
constructor(){
    owner = msg.sender;
}
receive() payable external {
    balance += msg.value;
    emit transferrecieved(msg.sender,msg.value);
}
function withdraw(uint amount, address payable to) public {
require(msg.sender==owner);
require(amount<= balance);

to.transfer(amount);
balance -= amount;
emit sent(msg.sender, to, amount);
}
function TRANSFERERC20(IERC20 token,address to, uint amount) public {
    require(owner==msg.sender);
    uint256 erc20balance= token.balanceOf(address(this));
    require(balance>=amount);
    token.transfer(to, amount);
    emit sent(msg.sender, to, amount);
}
}
